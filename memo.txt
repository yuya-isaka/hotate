参考：chibiscv(kivantium-core), chibi-risc-v(kivantium-core), ChiselProjectsIsaka(Pencilrocket、動かせたやつ？),  riscv-processor-hashi, riscv-book(chisel本井阪勉強)
古い：RV32
新しい：hotate(kivantium-core参考に作ってるやつ), first(Pencilrocketを参考に自分で作ってるやつ)

hotateはパラメータを利用してモジュールに引数渡したり、色々工夫できている。

改善案
・全体,ファイル名と変数名
・全体,型のパラメータ化(https://qiita.com/taichi-ishitani/items/ceee94d612c10bd08376)
・top,Topにメモリ移動
・top,Topでコアとメモリポート接続
・top,7segをモジュール化
・top,クロックの変更
・top,クロックのパラメータ化
・core,ステートをenumで定義,型のパラメータ化と一緒に(https://qiita.com/taichi-ishitani/items/ceee94d612c10bd08376)
・core,PC設定
・core,PCをリセット
・core,レジスタをコアで定義
・registerFile,コアに移動
・registerFile,読み込むレジスタをデコードに移動
・registerFile,書き込みをWBに移動
・dataとinstMemoryを統合,依存性の注入,インスタンス化で切り替える(https://qiita.com/taichi-ishitani/items/03b13589431c5213b968)
・dataMemory,べき乗演算
・dataMemory,定数定義
・dataMemory,データメモリの大きさ
・instructionMemory,べき乗演算
・instructionMemory,定数定義
・instructionMemory,命令メモリの大きさ
・instructionMemory,`default_nettype none
・executeInteger,デコードに幾つかコード移動
・executeInteger,演算処理パラメータで綺麗に
・executeInteger,ALUの最適化(https://qiita.com/triggerfish/items/54cb06461124b5b19064)
・executeInteger,funct3,funct7の使い方
・instructionDecoder,ListLookup的に処理したい,構造体を作成
・instructionDecoder,insideをBitPatのように使える->ListLookup的にできる
・instructionDecoder,funct3,funct7の使い方
・instructionDecoder,inside使って比較演算子書き換えられる
・instructionDecoder,1,0のところ変えたい

加工案
・FPGAマガジンを参考に構成変更
・FPGAマガジンを参考にキャッシュ作成
・ステートマシンを変更
・パイプライン
・M拡張追加
・CSR命令追加
・ECALL命令追加
・ハーバードからノイマン型へ
・xfpのuartを移植(pythonと通信)

目標
・xv6が動くCPU(xv6が2019年からRISC-Vに対応)
・OSを動かすために割り込みや特権命令，スーパーバイザーモードでの仮想アドレスを実装する必要あり


makefile 他のパターン
--------------------------------------------------------------
CC := riscv32-unknown-linux-gnu-gcc
LD := riscv32-unknown-linux-gnu-ld
OBJCOPY := riscv32-unknown-linux-gnu-objcopy
OBJDUMP := riscv32-unknown-linux-gnu-objdump
CFLAGS := -march=rv32ima -c

main: $(ARG).hex $(ARG).dump
	./hex2bin.sh $(ARG).hex > $(ARG).b

$(ARG).hex: $(ARG).bin
	hexdump -v -e '/4 "%08X" "\n"' $(ARG).bin > $(ARG).hex

$(ARG).bin: $(ARG).elf
	$(OBJCOPY) -O binary $(ARG).elf $(ARG).bin

$(ARG).elf: $(ARG).o start.o
	$(LD) $(ARG).o start.o -Tlink.ld -nostartfiles -static -o $(ARG).elf

start.o: start.S
	$(CC) $(CFLAGS) -o start.o start.S

$(ARG).o: $(ARG).S
	$(CC) $(CFLAGS) -o $(ARG).o $(ARG).S

$(ARG).S: $(ARG).c
	$(CC) $(CFLAGS) -S -o $(ARG).S $(ARG).c

$(ARG).dump: $(ARG).elf
	$(OBJDUMP) -d $(ARG).elf > $(ARG).dump

clean:
	$(RM) *.o *.out *.bin *.elf
----------------------------------------------------------------

Verilator
VCDファイル
テストベンチでVCD波形ダンプをONにする
verilator --cc --exe  --trace --trace-params --trace-structs --trace-underscore counter_4bit.v -exe tb_counter_4bit.cpp
make -C obj_dir -f Vcounter_4bit.mk
./obj_dir/Vcounter_4bit

FSTファイル
テストベンチでFST波形ダンプ
verilator --cc --exe  --trace-fst --trace-params --trace-structs --trace-underscore counter_4bit.v -exe tb_counter_4bit.cpp
make -C obj_dir -f Vcounter_4bit.mk
./obj_dir/Vcounter_4bit


_______________
Verilatorの使い方
1. https://msyksphinz.hatenablog.com/entry/2020/05/06/040000
2. https://msyksphinz.hatenablog.com/entry/2020/05/08/040000
3. 